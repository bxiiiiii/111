#include <stdio.h>
#include <stdlib.h>
#define ERROR 0
#define TRUE 1
#define FALSE 0
#define OK 1
#define max 100

typedef struct _Stack
{
    int date[max];
    int top;
}Stack;


Stack* initstack();//创建线性存储结构的栈结构
void destroystack(Stack* s);//摧毁栈
Stack* clearstack(Stack* s);//清空栈
int stackempty(Stack* s);//判断栈是否为空
int gettop(Stack* s, int* e);//获取栈顶元素
int push(Stack* s, int e);//进栈操作
int pop(Stack* s, int* e);//出栈操作
int stacklength(Stack* s);//获取栈长度


Stack* initstack()
{
    Stack* s;
    s = (Stack*)malloc(sizeof(Stack));
    s->top = -1;
    return s;
}
void destroystack(Stack* s)
{
    free(s);
    printf("清空成功！");
}
Stack* clearstack(Stack* s)
{
    s->top = -1;
    printf("清理成功！");
    return s;
}
int stackempty(Stack* s)
{
    if (s->top >= max)
        return FALSE;
    if (s->top == -1)
        return TRUE;
    else
        return FALSE;
}
int gettop(Stack* s, int* e)
{
    if (s->top > -1 && s->top < max)
    {
        *e = s->date[s->top];
        return OK;
    }
    else
        return FALSE;
}
int push(Stack* s, int e)//进栈操作
{
    if (s->top == max - 1)
    {
        return ERROR;
    }
    s->top++;
    s->date[s->top] = e;
    return OK;
}
int pop(Stack* s, int* e)
{
    if (s->top == -1)
        return ERROR;
    *e = s->date[s->top];
    s->top--;
    return OK;
}
int stacklength(Stack* s)
{
    return s->top++;
}
