typedef struct {
    int** arrr;
    int sumsSize;
} NumMatrix;

NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
    NumMatrix* ppp = (NumMatrix*)malloc(sizeof(NumMatrix));
    ppp->arrr = malloc(sizeof(int*) * matrixSize);
    ppp->sumsSize = matrixSize;
    for (int i = 0; i < matrixSize; i++)
    {
        ppp->arrr[i] = malloc(sizeof(int) * (matrixColSize[i]+1));
        ppp->arrr[i][0] = 0;
        for (int j = 0; j < matrixColSize[i]; j++)
        {
            ppp->arrr[i][j+1] = ppp->arrr[i][j] + matrix[i][j];
        }
    }
    return ppp;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    int sum = 0;
    for(int i = row1; i <= row2; i++)
    {
        sum += obj->arrr[i][col2+1] - obj->arrr[i][col1];
    }    
    return sum;
    }

void numMatrixFree(NumMatrix* obj) {
    for(int i = 0; i < obj->sumsSize; i++)
    {
        free(obj->arrr[i]);
    }   
    free(obj->arrr);
}

/**
 * Your NumMatrix struct will be instantiated and called as such:
 * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);
 * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);
 
 * numMatrixFree(obj);
*/
